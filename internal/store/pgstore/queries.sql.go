// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
    title,
    duration,
    genre,
    release_date
) VALUES (
    $1, $2, $3, $4
) RETURNING id, title, duration, genre, release_date, created_at, updated_at
`

type CreateMovieParams struct {
	Title       string
	Duration    int32
	Genre       string
	ReleaseDate pgtype.Timestamp
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, createMovie,
		arg.Title,
		arg.Duration,
		arg.Genre,
		arg.ReleaseDate,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Duration,
		&i.Genre,
		&i.ReleaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, duration, genre, release_date, created_at, updated_at FROM movies WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id uuid.UUID) (Movie, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Duration,
		&i.Genre,
		&i.ReleaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, title, duration, genre, release_date, created_at, updated_at FROM movies
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Duration,
			&i.Genre,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMoviesByGenre = `-- name: ListMoviesByGenre :many
SELECT id, title, duration, genre, release_date, created_at, updated_at FROM movies WHERE genre = $1
`

func (q *Queries) ListMoviesByGenre(ctx context.Context, genre string) ([]Movie, error) {
	rows, err := q.db.Query(ctx, listMoviesByGenre, genre)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Duration,
			&i.Genre,
			&i.ReleaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET
    title = COALESCE($2, title),
    duration = COALESCE($3, duration),
    genre = COALESCE($4, genre),
    release_date = COALESCE($5, release_date),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, duration, genre, release_date, created_at, updated_at
`

type UpdateMovieParams struct {
	ID          uuid.UUID
	Title       string
	Duration    int32
	Genre       string
	ReleaseDate pgtype.Timestamp
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, updateMovie,
		arg.ID,
		arg.Title,
		arg.Duration,
		arg.Genre,
		arg.ReleaseDate,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Duration,
		&i.Genre,
		&i.ReleaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
